function getDeployPath(url) {
    if (url == null)
        url = new URL(window.location.href);
    const deployPath = url.pathname.split('/')[1];
    if (deployPath === 'test' || deployPath === 'prod')
        return '/' + deployPath;
    else
        return '';
}

//Mostly all generated by GitHub Copilot
document.addEventListener('DOMContentLoaded', () => {

    // Select the button
    const button = document.querySelector('button');

    const fileInput = document.querySelector('.fileInput');

    const imageSource = document.querySelectorAll('img');

    let plantID = null;

    imageSource.forEach(image => { //Should only be one image
        plantID = image.getAttribute('data-plant-id');
    })

    let objectUrl = null;

    button.addEventListener('click', function(event) {
        const fileInputs = document.querySelectorAll('.fileInput');

        // Process each file input individually
        fileInputs.forEach(fileInput => {

            if (fileInput.files.length === 0) {
                alert('Please select a file')
                return;
            }

            const file = fileInput.files[0];

            if (!validateFile(file)) {
                return;
            }

            let formData = new FormData();

            const url = new URL(window.location.href);
            const deployPath = getDeployPath(url);

            const params = new URLSearchParams(url.search);

            let fetchURL = null

            let isFirstKey = true;

            for (const [key, value] of params.entries()) {
                if (isFirstKey) {
                    fetchURL = '/' + key
                    isFirstKey = false;
                    continue;
                }
                formData.append(key, value);
            }

            if (fetchURL != null)
                console.log('Fetch URL: ' + fetchURL)
            else {
                console.log('No fetch URL found')
                return;
            }

            formData.append('file', file);
            formData.append('_csrf', getCsrfToken());

            fetch(deployPath + fetchURL, {
                method: 'POST',
                body: formData
            })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    }
                })
                .catch(error => console.error(error));
        });
    });

    // Add an event listener to the file input
    fileInput.addEventListener('change', async function(event) {
        console.log("Plant ID: " + plantID)
        const file = event.target.files[0];

        const deployPath = getDeployPath();
        let tempImageId = null;
        let fileRequestBody = new FormData();
        fileRequestBody.append('file', file);
        fileRequestBody.append('_csrf', getCsrfToken());
        await fetch(deployPath + '/upload-image', {
            method: 'POST',
            body: fileRequestBody
        })
            .then(response => response.text())
            .then(body => {
                tempImageId = Number.parseInt(body, 10);
                console.log("body: " + body);
        })
            .catch(error => console.error(error));

        for (const image of imageSource) { //Should only be one image
            image.src = `${deployPath}/get-image?temporary=true&imageID=${tempImageId}`;

            console.log("Image source: " + image.src)
            image.style.display = "block";
        }
    });
});

//Generated by GitHub Copilot
function validateFile(file) {
    const allowedImageTypes = ['jpeg', 'png', 'svg'];
    const contentType = file.type.split('/').pop();
    const maxSize = 10 * 1024 * 1024; // 10MB

    let imageError = document.getElementById('imageError');
    console.log('image error: ' + imageError);
    console.log('image error text: ' + imageError.value);

    if (!allowedImageTypes.includes(contentType)) {
        // alert('Image must be of type png, jpg or svg');
        imageError.value = 'Image must be of type png, jpg or svg';
        return false;
    } else if (file.size > maxSize) {
        // alert('Image must be less than 10MB');
        imageError.value = 'Image must be less than 10MB';
        return false;
    }
    return true;
}

//Generated by GitHub Copilot
function getCsrfToken() {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, 'XSRF-TOKEN'.length + 1) === ('XSRF-TOKEN' + '=')) {
                cookieValue = decodeURIComponent(cookie.substring('XSRF-TOKEN'.length + 1));
                break;
            }
        }
    }
    console.log('XSRF-TOKEN: ' + cookieValue)
    return cookieValue;
}