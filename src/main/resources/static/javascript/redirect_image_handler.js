//Mostly all generated by GitHub Copilot
document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('button');

    const imageSource = document.querySelectorAll('img');

    let params = new URLSearchParams();

    function setParamsFromUrl() {
        const url = new URL(window.location.href);
        const pathname = url.pathname;

        let gardenID = null;

        switch (pathname) {
            case '/view-garden':
                gardenID = url.searchParams.get('gardenID');
                params.append('view-garden', 'true');
                params.append('gardenID', gardenID);
                break;
            case '/edit-plant':
                const plantID = url.searchParams.get('plantID');
                params.append('edit-plant', 'true');
                params.append('plantID', plantID);
                break;
            case '/create-plant':
                params.append('create-plant-picture', 'true');
                gardenID = url.searchParams.get('gardenID');
                params.append('gardenID', gardenID);
                break;
            case '/view-user-profile':
                params.append('view-user-profile', 'true');
                break;
            case '/edit-user-profile':
                params.append('edit-user-profile-image', 'true');
                break;
            //Add more cases as needed
            default:
                console.log('No match!');
        }
    }

    setParamsFromUrl();

    // Attach the event listener to each button individually
    buttons.forEach(button => {
        button.addEventListener('click', function(event) {

            event.stopPropagation();

            const buttonID = event.target.id;

            const buttonPlantID = buttonID.split('_')[1];

            if (!params.has('view-user-profile') && !params.has('edit-user-profile-image') && !params.has('create-plant-picture')) {
                params.set('plantID', buttonPlantID);
            }

            const fetchUrl = '/upload-image?' + params.toString();
            console.log(fetchUrl);

            fetch(fetchUrl, {
                method: 'GET',
            })
                .then(response => response.text())
                .then(data => {
                    document.body.innerHTML = data;
                    history.pushState(null, '', fetchUrl);
                    location.reload();
                })
                .catch(error => console.error(error));
        });
    });

    imageSource.forEach(image => {
        let userID = null;
        if (params.get('view-garden') === 'true') {
            const plantID = image.getAttribute('data-plant-id');
            params.set('plantID', plantID);
            console.log(params.toString())
        } else if (params.get('view-user-profile') === 'true' || params.get('edit-user-profile-image') === 'true'){
            userID = image.getAttribute('data-user-id');
            params.set('userID', userID);
        }
        if (!params.has('create-plant-picture')) { //We don't to get the image if we are creating a plant
            fetch('/get-image?' + params.toString(), {
            })
                .then(response => response.blob())
                .then(blob => {
                    image.src = URL.createObjectURL(blob);
                })
                .catch(error => console.error(error));
        }
    });
});