package nz.ac.canterbury.seng302.gardenersgrove.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class SlotsService {

    private final static int  COL_LENGTH = 15;

    private final static int NUM_COLS = 5;

    private final static int GAME_ROWS = 3;

    // Define base (3 in a row) amount of blooms for each emoji
    // "" ,"üíß", "‚òÄÔ∏è", "üçÑ", "üå∂Ô∏è", "üåæ"

    private static final int WIN_1 = 1;         // 3 in a row of üíß
    private static final int WIN_2 = 2;        // 3 in a row of ‚òÄÔ∏è
    private static final int WIN_3 = 3;      // 3 in a row of üçÑ
    private static final int WIN_4 = 4;      // 3 in a row of üå∂Ô∏è
    private static final int WIN_5 = 5;    // 3 in a row of üåæ

    //IMPORTANT NOT 0 INDEXED
    private static final int[] WIN_AMOUNTS = {0, WIN_1, WIN_2, WIN_3, WIN_4, WIN_5};

    //Define Multipliers for base win amounts
    private static final int MULTIPLIER_3_IN_A_ROW = 10;

    private static final int MULTIPLIER_4_IN_A_ROW = 30;
    private static final int MULTIPLIER_5_IN_A_ROW = 100;

    // Define the weights (odds) of each emoji appearing on the slot machine
    // The higher the weight, the more likely the emoji will appear
    private static final int WEIGHT_1 = 4;
    private static final int WEIGHT_2 = 4;
    private static final int WEIGHT_3 = 3;
    private static final int WEIGHT_4 = 2;
    private static final int WEIGHT_5 = 1;

    private static final int TOTAL_WEIGHT = WEIGHT_1 + WEIGHT_2 + WEIGHT_3 + WEIGHT_4 + WEIGHT_5;

    private final static int[] cumulativeWeights = {
            WEIGHT_1,
            WEIGHT_1 + WEIGHT_2,
            WEIGHT_1 + WEIGHT_2 + WEIGHT_3,
            WEIGHT_1 + WEIGHT_2 + WEIGHT_3 + WEIGHT_4,
            WEIGHT_1 + WEIGHT_2 + WEIGHT_3 + WEIGHT_4 + WEIGHT_5
    };

    /**
     * Randomly assigns which emoji will be added to the slot machine column
     * (Chooses one of the 5 emojis randomly)
     * Selects a random number between 1 and 5 based on predefined weights (odds).
     * This number represents one of the 5 emojis used in the slot machine
     * ["" ,"üíß", "‚òÄÔ∏è", "üçÑ", "üå∂Ô∏è", "üåæ"];
     * The odds are calculated by adding all the weightings of each emoji together
     * Then the emoji is chosen based on which emojis range of the cumulative weighting the random int lands in
     * @return The chosen number (slot machine emoji) as an int, between 1 and 5.
     */
    private static int chooseEmoji() {
        Random random = new Random();
        int randomValue = random.nextInt(TOTAL_WEIGHT) + 1;

        if (randomValue <= cumulativeWeights[0]) return 1;                          // Range of emoji 1, üíß
        if (randomValue <= cumulativeWeights[1]) return 2;                          // Range of emoji 2, ‚òÄÔ∏è
        if (randomValue <= cumulativeWeights[2]) return 3;                          // Range of emoji 3, üçÑ
        if (randomValue <= cumulativeWeights[3]) return 4;                          // Range of emoji 4, üå∂Ô∏è
        return 5;                                                                                                   // Range of emoji 5, üåæ      (anything greater than lower emoji bounds)
    }

    /**
     * Generates a column of the slot machine, a list of numbers (emojis) selected by chooseEmoji()
     * Size is defined by COL_LENGTH
     * The column is every number (emoji) that column of the slot machine will spin through
     * @return  int[] of random numbers
     */
    private static int[] generateColumn() {
        int[] col = new int[COL_LENGTH];
        for (int i = 0; i < COL_LENGTH; i++) {
            col[i] = chooseEmoji();
        }
        return col;
    }

    /**
     *Generates all columns of the slot machine
     * Each column contains every single number (emoji) that column of the slot machine will spin through
     * @return List of lists, of int[] arrays representing the slot machine
     */
    public static List<int[]> generateSlots() {
        List<int[]> slots = new ArrayList<>();
        for (int i = 0; i < NUM_COLS; i++) {
            slots.add(generateColumn());
        }
        return slots;
    }


    /**
     * Calculates the amount won by the player
     * @param slots The slots returned from generateSlots() function
     * @return The amount of blooms won by the player as a number üòä
     * Generated by our lord and savior Chatty G
     */
    public static int amountWon(List<int[]> slots) {
        int amountWon = 0;
        int bestRow = -1; // Tracks the row with the highest count of a single emoji
        int bestCount = 0; // Tracks the highest count of any emoji
        int bestEmoji = -1; // Tracks the emoji associated with the highest count

        // Iterate through the last GAME_ROWS rows
        for (int row = COL_LENGTH - GAME_ROWS; row < COL_LENGTH; row++) {
            int[] emojiCounts = new int[WIN_AMOUNTS.length]; // Counts occurrences of each emoji in this row

            // Iterate through each column to count the emojis
            for (int col = 0; col < NUM_COLS; col++) {
                int currentEmoji = slots.get(col)[row];
                emojiCounts[currentEmoji]++;
            }

            // Find the most frequent emoji in this row (ignoring sets of less than 3)
            for (int emoji = 1; emoji < emojiCounts.length; emoji++) { // Starts from 1 to avoid the 0 index
                // Only consider sets of 3 or more and check if this row has a better result
                // (higher count or higher emoji value in case of a tie)
                if (emojiCounts[emoji] >= 3 &&
                        (emojiCounts[emoji] > bestCount ||
                                (emojiCounts[emoji] == bestCount && WIN_AMOUNTS[emoji] > WIN_AMOUNTS[bestEmoji]))) {
                    bestRow = row;
                    bestCount = emojiCounts[emoji];
                    bestEmoji = emoji;
                }
            }

        }

        // Calculate the win amount based on the best row
        if (bestRow != -1 && bestEmoji != -1) {
            int baseWinAmount = WIN_AMOUNTS[bestEmoji];

            // Apply multipliers based on the count of the most frequent emoji
            if (bestCount == 3) {
                baseWinAmount *= MULTIPLIER_3_IN_A_ROW;
            } else if (bestCount == 4) {
                baseWinAmount *= MULTIPLIER_4_IN_A_ROW;
            } else if (bestCount == 5) {
                baseWinAmount *= MULTIPLIER_5_IN_A_ROW;
            }

            amountWon = baseWinAmount;
        }

        return amountWon;
    }



}
