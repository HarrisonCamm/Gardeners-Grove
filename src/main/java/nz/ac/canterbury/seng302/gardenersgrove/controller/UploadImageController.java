package nz.ac.canterbury.seng302.gardenersgrove.controller;

import nz.ac.canterbury.seng302.gardenersgrove.entity.Plant;
import nz.ac.canterbury.seng302.gardenersgrove.service.PlantService;
import nz.ac.canterbury.seng302.gardenersgrove.service.RedirectService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Controller
public class UploadImageController {

    Logger logger = LoggerFactory.getLogger(UploadImageController.class);

    private final PlantService plantService;

    @Autowired
    public UploadImageController(PlantService plantService) {
        this.plantService = plantService;
    }

    @GetMapping("/upload-image")
    public String uploadImage(@RequestParam(value = "view-garden", required = false) boolean viewGarden,
                              @RequestParam(value = "edit-plant", required = false) boolean editPlant,
                              @RequestParam("plantID") Long plantID,
                              @RequestParam(value = "gardenID", required = false) Long gardenID,
                              Model model) {

        logger.info("GET /upload-image");

        if (viewGarden) {
            RedirectService.addEndpoint("/view-garden?gardenID=" + gardenID);
        } else if (editPlant) {
            RedirectService.addEndpoint("/edit-plant?plantID=" + plantID);
        }
        model.addAttribute("plant", plantService.findPlant(plantID).get());

        return "uploadImageTemplate";
    }

    // Generated by GitHub Copilot
    @GetMapping("/get-image")
    public ResponseEntity<byte[]> getPlantImage(@RequestParam(value = "view-garden", required = false) boolean viewGarden,
                                                @RequestParam(value = "edit-plant", required = false) boolean editPlant,
                                                @RequestParam(value = "gardenID", required = false) Long gardenID,
                                                @RequestParam("plantID") Long plantID) {
        //Add cases for required image (plant or user)

        Plant plant = plantService.findPlant(plantID).get();
        byte[] image = plant.getImage();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.IMAGE_JPEG);

        return new ResponseEntity<>(image, headers, HttpStatus.OK);
    }
}
