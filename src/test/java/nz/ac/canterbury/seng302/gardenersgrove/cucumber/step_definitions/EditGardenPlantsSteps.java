package nz.ac.canterbury.seng302.gardenersgrove.cucumber.step_definitions;

import io.cucumber.java.BeforeAll;
import nz.ac.canterbury.seng302.gardenersgrove.controller.EditPlantController;
import nz.ac.canterbury.seng302.gardenersgrove.controller.ViewGardenController;
import nz.ac.canterbury.seng302.gardenersgrove.entity.Garden;
import nz.ac.canterbury.seng302.gardenersgrove.entity.Location;
import nz.ac.canterbury.seng302.gardenersgrove.entity.Plant;
import nz.ac.canterbury.seng302.gardenersgrove.entity.User;
import nz.ac.canterbury.seng302.gardenersgrove.service.GardenService;
import nz.ac.canterbury.seng302.gardenersgrove.service.ImageService;
import nz.ac.canterbury.seng302.gardenersgrove.service.PlantService;
import nz.ac.canterbury.seng302.gardenersgrove.service.UserService;
import org.junit.jupiter.api.Assertions;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.*;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;

import org.mockito.Mockito;

import java.util.Collections;

import static org.mockito.ArgumentMatchers.any;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@SpringBootTest
public class EditGardenPlantsSteps {
    private static MockMvc mockMvcEditPlant;
    private static MockMvc mockMvcViewGarden;

    @MockBean
    private static PlantService plantService;

    @MockBean
    private static GardenService gardenService;

    @MockBean
    private static UserService userService;

    @MockBean
    private static ImageService imageService;

    private static Map<Long, Plant> mockPlantDB;        //Todo could change back to array list and ensure id == index

    private static Garden testGarden;

    @BeforeAll
    public static void before_or_after_all() {
        plantService = Mockito.mock(PlantService.class);
        gardenService = Mockito.mock(GardenService.class);
        userService = Mockito.mock(UserService.class);
        imageService = Mockito.mock(ImageService.class);

        //Logged in user handling code taken from RequestPasswordSteps.java credit OCL28
        User loggedInUser = new User("user@gmail.com", "Test", "User", "p@ssw0rd123");
        when(userService.getAuthenicatedUser()).thenReturn(loggedInUser);
        when(userService.getUserByEmail(any(String.class))).thenReturn(loggedInUser);
        when(userService.emailExists(any(String.class))).thenReturn(true);
        when(userService.updateUserPassword(any(User.class), any(String.class))).thenReturn(loggedInUser);

        mockPlantDB = new HashMap<>();
        testGarden = new Garden("testGardenName", new Location(), "1");
        testGarden.setId(1L);
        testGarden.setOwner(loggedInUser);

        //Mock gardenService methods called by test pages
        when(gardenService.findGarden(any(Long.class))).thenReturn(Optional.of(testGarden));

        //Mock PlantService to access mockPlantDB list instead of a real database
        when(plantService.addPlant(any(Plant.class))).thenAnswer(invocation -> {
            Long id = (long) mockPlantDB.size();
            Plant plant = invocation.getArgument(0);
            plant.setId(id);
            mockPlantDB.put(plant.getId(),plant);
            return plant;
        });
        when(plantService.findPlant(any(Long.class)))
                .thenAnswer(invocation -> Optional.of(mockPlantDB.get(invocation.getArgument(0))));     //Suspicious stew
        when(plantService.getGardenPlant(any(Long.class))).thenReturn(new ArrayList<>(mockPlantDB.values()));

        //Mock GardenService to only return testgarden
        //Generated by copilot ðŸ¤ª
        when(gardenService.getGardens()).thenReturn(Collections.singletonList(testGarden));
        when(gardenService.getOwnedGardens(any(Long.class))).thenReturn(Collections.singletonList(testGarden));
        when(gardenService.findGarden(any(Long.class))).thenReturn(Optional.of(testGarden));

        //Create Controller objects for MockMVC pages
        ViewGardenController ViewGardenController = new ViewGardenController(gardenService, plantService, userService, imageService);
        EditPlantController EditPlantController = new EditPlantController(plantService, gardenService, userService, imageService);

        //Build MockMVC page
        mockMvcViewGarden = MockMvcBuilders.standaloneSetup(ViewGardenController).build();
        mockMvcEditPlant = MockMvcBuilders.standaloneSetup(EditPlantController).build();
    }
    //AC1-9
    @Given("I have {int} plants in my garden with the details {string}, {string}, {string}, and {string}")
    public void i_have_plants_in_my_garden_with_the_details_and(Integer numPlants, String plantName, String plantCount, String plantDesc, String plantDatePlanted) {
        for (int i = 0; i<numPlants; i++){
            plantService.addPlant(new Plant(testGarden, plantName, plantCount, plantDesc, plantDatePlanted));
        }
        Assertions.assertNotNull(mockPlantDB);      //Probably a waste of an assertion
        Assertions.assertEquals(numPlants, mockPlantDB.size()); //Another sanity check assertion
    }
    //AC1-9
    @Given("I am on the garden details page")
    public void i_am_on_the_garden_details_page() throws Exception{
        mockMvcViewGarden.perform(get("/view-garden?gardenID=" + testGarden.getId()))
                .andExpect(status().isOk())
                .andExpect(view().name("viewGardenDetailsTemplate"));
    }
    @Then("I should see a list of {int} plants")
    public void i_should_see_a_list_of_plants(Integer int1) {
        // Write code here that turns the phrase above into concrete actions
        throw new io.cucumber.java.PendingException();
    }
    @Then("they have the following details displayed {string}, {string}, {string}, and {string}")
    public void they_have_the_following_details_displayed_and(String string, String string2, String string3, String string4) {
        // Write code here that turns the phrase above into concrete actions
        throw new io.cucumber.java.PendingException();
    }


}
